name: Go API Example (fixed formatting)

on:
  workflow_dispatch:

jobs:
  run-go-inline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Use Go to query GitHub API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          go run - <<'EOF'
          package main

          import (
            "encoding/json"
            "fmt"
            "net/http"
            "os"
            "time"
          )

          type PullRequest struct {
            Title string `json:"title"`
            User  struct {
              Login string `json:"login"`
            } `json:"user"`
            CreatedAt time.Time `json:"created_at"`
          }

          func main() {
            repo := os.Getenv("REPO")
            token := os.Getenv("GITHUB_TOKEN")

            if repo == "" || token == "" {
              fmt.Fprintln(os.Stderr, "Missing required environment variables.")
              os.Exit(1)
            }

            url := fmt.Sprintf("https://api.github.com/repos/%s/pulls?state=open", repo)
            req, _ := http.NewRequest("GET", url, nil)
            req.Header.Add("Authorization", "token "+token)
            req.Header.Add("Accept", "application/vnd.github+json")

            resp, err := http.DefaultClient.Do(req)
            if err != nil {
              fmt.Fprintln(os.Stderr, "HTTP error:", err)
              os.Exit(1)
            }
            defer resp.Body.Close()

            if resp.StatusCode != 200 {
              fmt.Fprintf(os.Stderr, "GitHub API returned %d\n", resp.StatusCode)
              os.Exit(1)
            }

            var prs []PullRequest
            if err := json.NewDecoder(resp.Body).Decode(&prs); err != nil {
              fmt.Fprintln(os.Stderr, "Decode error:", err)
              os.Exit(1)
            }

            fmt.Printf("ðŸ“Š Found %d open pull requests:\n", len(prs))
            for _, pr := range prs {
              fmt.Printf("- %s (by @%s on %s)\n",
                pr.Title, pr.User.Login, pr.CreatedAt.Format("Jan 2, 2006"))
            }
          }
          EOF
